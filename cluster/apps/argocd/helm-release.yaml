---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: argocd
  namespace: argocd
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  interval: 15m
  chart:
    spec:
      chart: argo-cd
      version: 4.5.8
      sourceRef:
        kind: HelmRepository
        name: argocd
        namespace: flux-system
      interval: 15m
  values:
    configs:
      repositories:
        - type: git
          name: thishouse
          url: https://github.com/jjalvare/thishouse.git
        - type: helm
          name: argo-cd
          url: https://argoproj.github.io/argo-helm
        - type: helm
          name: bitnami
          url: https://charts.bitnami.com/bitnami
        - type: helm
          name: jetstack
          url: https://charts.jetstack.io
      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,
        https
    server:
      logLevel: "debug"
      extraArgs:
        - --insecure
      config:
        kustomize.buildOptions: "--enable-alpha-plugins"
        statusbadge.enabled: 'true'
        resource.customizations.health.argoproj.io_Application: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
        configManagementPlugins: |
          - name: gen-plugin
            init:
              command:
                - 'sh'
                - '-c'
                - |
                  echo $(date) >> /custom-tools-logs/log.txt 2>&1
                  if test -e Chart.yaml; then
                    helm dependency build
                  fi
            generate:
              command:
                - 'sh'
                - '-c'
                - |
                  echo $(date) >> /custom-tools-logs/log.txt 2>&1
                  BASENAME=`basename $PWD`
                  if test -e Chart.yaml; then
                    helm template --set domain=$SECRET_DOMAIN --include-crds $BASENAME --namespace $BASENAME .
                  elif test -e kustomization.yaml; then
                    kustomize build --env domain=$SECRET_DOMAIN  .
                  else
                    argocd-vault-plugin generate ./
                  fi        #
          - name: argocd-lovely-plugin
            generate:
              command: ["argocd-lovely-plugin"]
          - name: argocd-vault-plugin-helm
            init:
              command:
                - 'sh'
                - '-xc'
                - |
                  for file in `find . -type f -name *.yaml`; do [ -f $file ] || continue; echo $file; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt; done
                  helm dependency build || true
            generate:
              command:
                - 'sh'
                - '-xc'
                - |
                  for file in `find . -type f -name *.yaml`; do [ -f $file ] || continue; echo $file; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file; done
                  echo $ARGOCD_ENV_HELM_VALUES | helm template  . --set domain=$SECRET_DOMAIN --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $ARGOCD_ENV_HELM_ARGS -f - | argocd-vault-plugin generate -
          - name: kustomize-helm
            init:
              command:
                - 'sh'
                - '-exc'
                - |
                  files=$(find . -type f -name *.yaml)
                  echo $files >> /custom-tools-logs/log.txt
                  for file in $files; do  echo $file; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt;done
                  helm dependency build || true
            generate:
              command:
                - 'sh'
                - '-exc'
                - |
                  echo $files >> /custom-tools-logs/log.txt
                  for file in $files; do echo $file >>  /custom-tools-logs/log.txt; cat $file >> /custom-tools-logs/log.txt ; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt;done
                  echo $ARGOCD_ENV_HELM_VALUES | helm template .  --set domain=$SECRET_DOMAIN --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $ARGOCD_ENV_HELM_ARGS -f - > all.yaml && kustomize build
          - name: helm
            init:
              command:
                - 'sh'
                - '-xc'
                - |
                  for file in `find . -type f -name *.yaml`; do [ -f $file ] || continue; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt; done
                  helm dependency build || true
            generate:
              command:
                - 'sh'
                - '-xc'
                - |
                  for file in `find . -type f -name *.yaml`; do [ -f $file ] || continue; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt; done
                  echo $ARGOCD_ENV_HELM_VALUES | helm template .  --set domain=$SECRET_DOMAIN --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $ARGOCD_ENV_HELM_ARGS -f -
          - name: kustomize
            generate:
              command:
                - 'sh'
                - '-xc'
                - |
                  for file in `find . -type f -name *.yaml`; do [ -f $file ] || continue; cat $file >> /custom-tools-logs/log.txt; mv $file ${file}.backup; SECRET_DOMAIN=$SECRET_DOMAIN envsubst < ${file}.backup > $file; cat $file >> /custom-tools-logs/log.txt; done
                  kustomize build --env domain=$SECRET_DOMAIN  .
      additionalApplications:
        # Self-managed ArgoCD
        # - name: argo-cd
        #   namespace: argocd
        #   destination:
        #     namespace: argocd
        #     server: https://kubernetes.default.svc
        #   project: argocd
        #   source:
        #     path: charts/argo-cd
        #     # This repo
        #     repoURL: https://github.com/jjalvare/thishouse.git
        #     targetRevision: HEAD
        #   syncPolicy:
        #     automated:
        #       prune: true
        #       selfHeal: true
          #   syncOptions:
          #   - CreateNamespace=true

        # Root app of apps `/apps`
        - name: root
          namespace: argocd
          destination:
            namespace: argocd
            server: https://kubernetes.default.svc
          project: default
          source:
            path: cluster/apps/argocd/apps/root
            repoURL: https://github.com/jjalvare/thishouse.git
            targetRevision: HEAD
          syncPolicy:
            automated:
              selfHeal: true
              prune: true

        # Root app of infra `/infra`
        # - name: infra
        #   namespace: argocd
        #   destination:
        #     namespace: infra
        #     server: https://kubernetes.default.svc
        #   project: infra
        #   source:
        #     path: infra
        #     repoURL: https://github.com/jjalvare/thishouse.git
        #     targetRevision: HEAD
        #     helm:
        #       valueFiles:
        #         # Method 1: Mount the gpg/age key from a kubernetes secret as volume
        #         # secrets+gpg-import://<key-volume-mount>/<key-name>.asc?<relative/path/to/the/encrypted/secrets.yaml>
        #         # secrets+age-import://<key-volume-mount>/<key-name>.txt?<relative/path/to/the/encrypted/secrets.yaml>
        #         # Example Method 1: (Assumptions: key-volume-mount=/helm-secrets-private-keys, key-name=key, secrets.yaml is in the templates folder)
        #         - secrets+age-import:///helm-secrets-private-keys/key.txt?secret-values.enc.yaml
        #   syncPolicy:
        #     automated:
        #       selfHeal: true
        #       prune: true
        #     syncOptions:
        #       - CreateNamespace=true

      additionalProjects:
        - name: root
          namespace: argocd
          description: Root Application Project
          additionalLabels: {}
          additionalAnnotations: {}
          sourceRepos:
            - "*"
          destinations:
            - namespace: argocd
              server: https://kubernetes.default.svc
          clusterResourceWhitelist:
            - group: "*"
              kind: "*"
          orphanedResources:
            warn: false

        # - name: infra
        #   namespace: argocd
        #   additionalLabels: {}
        #   additionalAnnotations: {}
        #   description: Infrastructure Project
        #   sourceRepos:
        #     - "*"
        #   destinations:
        #     - namespace: argocd
        #       server: https://kubernetes.default.svc
        #     - namespace: infra
        #       server: https://kubernetes.default.svc
        #     - namespace: kube-system
        #       server: https://kubernetes.default.svc
        #     - namespace: cert-manager
        #       server: https://kubernetes.default.svc
        #   clusterResourceWhitelist:
        #     - group: "*"
        #       kind: "*"
        #   orphanedResources:
        #     warn: false
      # ingress:
      #   enabled: true
      #   ingressClassName: nginx
      #   annotations:
      #     cert-manager.io/cluster-issuer: letsencrypt-production
      #     hajimari.io/appName: ArgoCD
      #     hajimari.io/enable: "true"
      #     hajimari.io/icon: robot
      #   hosts:
      #     - &host "argocd.${SECRET_DOMAIN}"
      #   tls:
      #     - secretName: argocd-tls-certificate
      #       hosts:
      #         - *host
      metrics: &metrics
        enabled: true
    dex:
      enabled: false
    controller:
      metrics: *metrics
    repoServer:
      logLevel: "debug"
      # This allows reading secrets in the same namespace
      serviceAccount:
        create: true
        name: argocd-repo-server
      rbac:
      # yamllint disable-line rule:indentation
      - apiGroups:
        # yamllint disable-line rule:indentation
        - ""
        resources:
        # yamllint disable-line rule:indentation
        - secrets
        verbs:
        # yamllint disable-line rule:indentation
        - get
      clusterAdminAccess:
        enabled: true
      metrics: *metrics
      # Mount the secrets to the ArgoCD repo server
      volumes:
        - name: sops-age
          secret:
            secretName: sops-age
        - name: cluster-secrets
          secret:
            secretName: cluster-secrets
        - name: custom-tools
          emptyDir: {}
        - name: custom-tools-logs
          emptyDir: {}
        # - configMap:
            # name: cmp-plugin
          # name: cmp-plugin
        - emptyDir: {}
          name: cmp-tmp
      volumeMounts:
        - mountPath: /sops-age/
          name: sops-age
        - mountPath: /cluster-secrets/
          name: cluster-secrets
        - mountPath: /custom-tools
          name: custom-tools
        - mountPath: /custom-tools-logs
          name: custom-tools-logs
        # - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          # subPath: plugin.yaml
          # name: cmp-plugin
        # ksops: Mount ksops to kustomize plugin
        - mountPath: /usr/local/bin/kustomize
          name: custom-tools
          subPath: kustomize
        - name: custom-tools
          mountPath: /usr/local/bin/argocd-lovely-plugin
          subPath: argocd-lovely-plugin
          # Verify this matches a XDG_CONFIG_HOME=/.config env variable
        - mountPath: /.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops
          name: custom-tools
          subPath: ksops
        - mountPath: /usr/local/bin/kubectl
          name: custom-tools
          subPath: kubectl
        - mountPath: /usr/local/bin/envsubst
          name: custom-tools
          subPath: envsubst
        - mountPath: /usr/local/bin/argocd-vault-plugin
          name: custom-tools
          subPath: argocd-vault-plugin
      envFrom:
        - secretRef:
            name: cluster-secrets
      env:
        # ksops: Set the XDG_CONFIG_HOME env variable to allow kustomize to detect the plugin
        - name: XDG_CONFIG_HOME
          value: /.config
        # ksops: Points SOPS_AGE_KEY_FILE to key.txt for decryption with ksops
        - name: SOPS_AGE_KEY_FILE
          value: /sops-age/age.agekey
        # ksops: Points SOPS_AGE_KEY_FILE to key.txt for decryption with ksops
        - name: HELM_PLUGINS
          value: /custom-tools/helm-plugins/
        # In case wrapper scripts are used, HELM_SECRETS_HELM_PATH needs to be the path of the real helm binary
        - name: HELM_SECRETS_HELM_PATH
          value: /usr/local/bin/helm
        - name: HELM_SECRETS_SOPS_PATH
          value: /custom-tools/sops
        - name: HELM_SECRETS_KUBECTL_PATH
          value: /custom-tools/kubectl
        # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
        - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
          value: "false"
        - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
          value: "false"
        - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
          value: "false"

      initContainers:
        - name: argocd-lovely-plugin-download
          image: ghcr.io/crumbhole/argocd-lovely-plugin:0.5.2
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools
        - name: download-tools
          image: alpine:latest
          command: [sh, -c]
          env:
            - name: HELM_SECRETS_VERSION
              value: "3.12.0"
            - name: SOPS_VERSION
              value: "3.7.2"
            - name: SOPS_ARCH
              value: "linux.amd64"
            - name: KUBECTL_VERSION
              value: "1.22.4"
            - name: KUBECTL_ARCH
              value: "linux/amd64"
            - name: AVP_VERSION
              value: "1.7.0"
            - name: ENVSUBST_VERSION
              value: "1.2.0"
          args:
            - |
              mkdir -p /custom-tools/helm-plugins
              wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;
              wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64
              wget -qO /custom-tools/argocd-vault-plugin https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v${AVP_VERSION}/argocd-vault-plugin_${AVP_VERSION}_linux_amd64
              wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl
              wget -qO /custom-tools/envsubst https://github.com/a8m/envsubst/releases/download/v${ENVSUBST_VERSION}/envsubst-`uname -s`-`uname -m` -o envsubst
              chmod +x /custom-tools/*
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools

        # ksops: Install KSOPS
        - name: install-ksops
          image: viaductoss/ksops:v3.0.2
          command: ["/bin/sh", "-c"]
          args:
            - echo "Installing KSOPS...";
              mv ksops /custom-tools/;
              mv $GOPATH/bin/kustomize /custom-tools/;
              echo "Done.";
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools
    redis:
      metrics: *metrics
